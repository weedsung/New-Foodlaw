"use client"

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, TableFooter } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Search, X, Database, Loader2 } from 'lucide-react';
import { foodNutritionService } from '@/lib/ai-service';

interface NutritionRow {
  name: string;
  energy: number;
  protein: number;
  fat: number;
  carbohydrate: number;
  sugar: number;
  sodium: number;
  transFat: number;
  saturatedFat: number;
  cholesterol: number;
}

interface Ingredient {
  id: string
  name: string
  weight: number
  ratio: number
  notes: string
}

interface Step3NutritionProps {
  productName: string;
  mainIngredients: string;
  productType: string;
  totalWeight: number;
  ingredients: Ingredient[];
  nutrition: NutritionRow[];
  onNutritionChange: (nutrition: NutritionRow[]) => void;
}

const DEFAULT_NUTRITION: NutritionRow[] = [
  { name: 'Ïû¨Î£å1', energy: 0, protein: 4.84, fat: 2.57, carbohydrate: 3.74, sugar: 0.91, sodium: 155.00, transFat: 0.01, saturatedFat: 0.35, cholesterol: 0.00 },
  { name: 'Ïû¨Î£å2', energy: 0, protein: 9.00, fat: 3.00, carbohydrate: 69.00, sugar: 7.00, sodium: 1330.00, transFat: 0, saturatedFat: 1.00, cholesterol: 0.00 },
  { name: 'Ïû¨Î£å3', energy: 0, protein: 0.95, fat: 0.04, carbohydrate: 2.35, sugar: 1.70, sodium: 2.00, transFat: 0.00, saturatedFat: 0.01, cholesterol: 0.00 },
  { name: 'Ïû¨Î£å4', energy: 0, protein: 28.00, fat: 46.00, carbohydrate: 20.00, sugar: 5.00, sodium: 0.00, transFat: 0.00, saturatedFat: 8.50, cholesterol: 0.00 },
];

export function Step3Nutrition({
  productName,
  mainIngredients,
  productType,
  totalWeight,
  ingredients,
  nutrition,
  onNutritionChange
}: Step3NutritionProps) {
  const [localNutrition, setLocalNutrition] = useState<NutritionRow[]>([]);
  
  // DB Ïó∞Í≤∞ Í¥ÄÎ†® ÏÉÅÌÉú
  const [showIngredientModal, setShowIngredientModal] = useState(false);
  const [showSearchModal, setShowSearchModal] = useState(false);
  const [selectedIngredient, setSelectedIngredient] = useState<{ name: string } | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [isSearching, setIsSearching] = useState(false);

  // Î¨¥Ìïú Î£®ÌîÑ Î∞©ÏßÄÎ•º ÏúÑÌïú ref
  const isInitialized = useRef(false);

  // localStorageÏóêÏÑú ÏòÅÏñëÏÑ±Î∂Ñ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
  useEffect(() => {
    const savedNutrition = localStorage.getItem('step3Nutrition');
    if (savedNutrition && !isInitialized.current) {
      try {
        const parsedNutrition = JSON.parse(savedNutrition);
        if (Array.isArray(parsedNutrition) && parsedNutrition.length > 0) {
          setLocalNutrition(parsedNutrition);
          isInitialized.current = true; // Ï¥àÍ∏∞ Î≥µÏõê ÏôÑÎ£å ÌëúÏãú
          console.log('localStorageÏóêÏÑú ÏòÅÏñëÏÑ±Î∂Ñ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê:', parsedNutrition);
          // Î∂ÄÎ™®ÏóêÍ≤åÎèÑ Î≥µÏõêÎêú Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
          onNutritionChange(parsedNutrition);
        }
      } catch (error) {
        console.error('localStorage Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïò§Î•ò:', error);
      }
    }
  }, []);

  // localNutritionÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ localStorageÏóê Ï†ÄÏû•
  useEffect(() => {
    if (localNutrition.length > 0 && isInitialized.current) {
      localStorage.setItem('step3Nutrition', JSON.stringify(localNutrition));
      console.log('localStorageÏóê ÏòÅÏñëÏÑ±Î∂Ñ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•:', localNutrition);
    }
  }, [localNutrition]);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Î∂ÄÎ™®ÏóêÍ≤å ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
  useEffect(() => {
    return () => {
      if (localNutrition.length > 0 && isInitialized.current) {
        console.log('Step3Nutrition Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨:', localNutrition);
        // Ï¶âÏãú Î∂ÄÎ™®ÏóêÍ≤å Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨ (setTimeout ÏóÜÏù¥)
        onNutritionChange(localNutrition);
        // localStorageÏóêÎèÑ ÏµúÏ¢Ö Ï†ÄÏû•
        localStorage.setItem('step3Nutrition', JSON.stringify(localNutrition));
      }
    };
  }, [localNutrition, onNutritionChange]);

  // onNutritionChangeÎ•º ÏïàÏ†ÑÌïòÍ≤å Ìò∏Ï∂úÌïòÍ∏∞ ÏúÑÌïú ÏΩúÎ∞±
  const safeNutritionChange = useCallback((nutrition: NutritionRow[]) => {
    if (isInitialized.current) {
      // Ï¶âÏãú Î∂ÄÎ™®ÏóêÍ≤å Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
      onNutritionChange(nutrition);
      console.log('Î∂ÄÎ™®ÏóêÍ≤å ÏòÅÏñëÏÑ±Î∂Ñ Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨:', nutrition);
    }
  }, [onNutritionChange]);

  // nutrition propÏù¥ Î≥ÄÍ≤ΩÎê† Îïå localNutrition ÎèôÍ∏∞Ìôî
  useEffect(() => {
    if (nutrition && nutrition.length > 0 && !isInitialized.current) {
      setLocalNutrition(nutrition);
      isInitialized.current = true; // prop Í∏∞Î∞ò Î≥µÏõê Ïãú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å
      console.log('nutrition propÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê:', nutrition);
    } else if (nutrition && nutrition.length === 0 && localNutrition.length > 0) {
      // nutritionÏù¥ Îπà Î∞∞Ïó¥Ïù¥Í≥† localNutritionÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ïú†ÏßÄ
      console.log('nutrition propÏù¥ Îπà Î∞∞Ïó¥Ïù¥ÏßÄÎßå Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ:', localNutrition);
      // Î∂ÄÎ™®ÏóêÍ≤å Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨ÌïòÏó¨ ÎçÆÏñ¥Ïì∞Í∏∞ Î∞©ÏßÄ
      onNutritionChange(localNutrition);
    }
  }, [nutrition, localNutrition.length, onNutritionChange]);

  // Ïû¨Î£å Î™©Î°ùÏù¥ Î≥ÄÍ≤ΩÎê† Îïå ÏòÅÏñëÏÑ±Î∂Ñ ÌÖåÏù¥Î∏î Ï¥àÍ∏∞Ìôî (Ï¥àÍ∏∞ 1ÌöåÎßå, Ïù¥ÎØ∏ Î≥µÏõêÎêòÏóàÏúºÎ©¥ Ïä§ÌÇµ)
  useEffect(() => {
    if (ingredients && ingredients.length > 0 && !isInitialized.current && localNutrition.length === 0) {
      const nutritionRows: NutritionRow[] = ingredients.map(ingredient => ({
        name: ingredient.name,
        energy: 0,
        protein: 0,
        fat: 0,
        carbohydrate: 0,
        sugar: 0,
        sodium: 0,
        transFat: 0,
        saturatedFat: 0,
        cholesterol: 0
      }));
      
      setLocalNutrition(nutritionRows);
      // Ï¥àÍ∏∞ ÏÑ∏ÌåÖ Ïãú Î∂ÄÎ™® ÏΩúÎ∞± Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå (ÎçÆÏñ¥Ïì∞Í∏∞/Î£®ÌîÑ Î∞©ÏßÄ)
      isInitialized.current = true;
    }
  }, [ingredients, localNutrition.length]);

  // Ïû¨Î£åÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÏòÅÏñëÏÑ±Î∂Ñ ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ (Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Î≥¥Ï°¥)
  useEffect(() => {
    if (ingredients && ingredients.length > 0 && localNutrition.length === 0 && isInitialized.current) {
      const updatedNutrition = ingredients.map((ingredient, index) => ({
        name: ingredient.name || `Ïû¨Î£å${index + 1}`,
        energy: 0,
        protein: 0,
        fat: 0,
        carbohydrate: 0,
        sugar: 0,
        sodium: 0,
        transFat: 0,
        saturatedFat: 0,
        cholesterol: 0
      }));
      setLocalNutrition(updatedNutrition);
      safeNutritionChange(updatedNutrition);
    }
  }, [ingredients, localNutrition.length, safeNutritionChange]);

  // ÏòÅÏñëÏÑ±Î∂Ñ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleNutritionChange = (index: number, field: keyof NutritionRow, value: number) => {
    const updatedNutrition = [...localNutrition];
    updatedNutrition[index] = {
      ...updatedNutrition[index],
      [field]: value
    };
    setLocalNutrition(updatedNutrition);
    
    // Ìï≠ÏÉÅ Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï†ÑÎã¨
    safeNutritionChange(updatedNutrition);
  };

  // Ï¥ùÍ≥Ñ Í≥ÑÏÇ∞
  const totals = localNutrition.reduce((acc, row) => ({
    energy: acc.energy + (row.energy || 0),
    protein: acc.protein + (row.protein || 0),
    fat: acc.fat + (row.fat || 0),
    carbohydrate: acc.carbohydrate + (row.carbohydrate || 0),
    sugar: acc.sugar + (row.sugar || 0),
    sodium: acc.sodium + (row.sodium || 0),
    transFat: acc.transFat + (row.transFat || 0),
    saturatedFat: acc.saturatedFat + (row.saturatedFat || 0),
    cholesterol: acc.cholesterol + (row.cholesterol || 0)
  }), {
    energy: 0,
    protein: 0,
    fat: 0,
    carbohydrate: 0,
    sugar: 0,
    sodium: 0,
    transFat: 0,
    saturatedFat: 0,
    cholesterol: 0
  });

  // Î∞∞Ìï©ÎπÑ Í≥ÑÏÇ∞ (ingredientsÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
  const totalRatio = ingredients.reduce((sum, ingredient) => sum + ingredient.ratio, 0);
  const isRatioNearLimit = totalRatio > 95;
  const isRatioOverLimit = totalRatio > 100;

  // DB Ïó∞Í≤∞ Î™®Îã¨ Ïó¥Í∏∞
  const handleDBConnect = () => {
    if (ingredients.length === 0) {
      alert("Î®ºÏ†Ä Ïû¨Î£åÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }
    setShowIngredientModal(true);
  };

  // Ïû¨Î£å ÏÑ†ÌÉù Ïãú Í≤ÄÏÉâ Î™®Îã¨ Ïó¥Í∏∞
  const handleIngredientSelect = (ingredient: { name: string }) => {
    setSelectedIngredient(ingredient);
    setSearchQuery(ingredient.name); // Í≤ÄÏÉâÏñ¥Î•º Ïû¨Î£åÎ™ÖÏúºÎ°ú ÎØ∏Î¶¨ ÏÑ§Ï†ï
    setShowIngredientModal(false);
    setShowSearchModal(true);
  };

  // Ïã§Ï†ú Î∞±ÏóîÎìú APIÎ•º Ìò∏Ï∂úÌïòÏó¨ ÏãùÌíà Í≤ÄÏÉâ
  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setSearchResults([]);
      return;
    }

    setIsSearching(true);
    try {
      const result = await foodNutritionService.searchFood(searchQuery.trim(), 1, 20);
      
      if (result.success && result.data) {
        setSearchResults(result.data);
        console.log('üîç ÏãùÌíà Í≤ÄÏÉâ Í≤∞Í≥º:', result);
      } else {
        console.error('ÏãùÌíà Í≤ÄÏÉâ Ïã§Ìå®:', result.error);
        setSearchResults([]);
      }
    } catch (error) {
      console.error('ÏãùÌíà Í≤ÄÏÉâ Ï§ë Ïò§Î•ò:', error);
      setSearchResults([]);
    } finally {
      setIsSearching(false);
    }
  };

  // Í≤ÄÏÉâÏñ¥Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÏûêÎèô Í≤ÄÏÉâ (ÎîîÎ∞îÏö¥Ïã±)
  useEffect(() => {
    const timer = setTimeout(() => {
      if (searchQuery.trim()) {
        handleSearch();
      } else {
        setSearchResults([]);
      }
    }, 500);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  // Enter ÌÇ§Î°ú Í≤ÄÏÉâ Ïã§Ìñâ
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  // ÏãùÌíà ÏÑ†ÌÉù Ïãú ÏòÅÏñëÏÑ±Î∂Ñ ÌÖåÏù¥Î∏îÏóê Ï†ÅÏö©
  const handleFoodSelect = (food: any) => {
    console.log('ÏÑ†ÌÉùÎêú ÏãùÌíà:', food);
    
    // ÏÑ†ÌÉùÎêú Ïû¨Î£åÏóê Ìï¥ÎãπÌïòÎäî ÏòÅÏñëÏÑ±Î∂Ñ Ìñâ Ï∞æÍ∏∞
    const targetRow = localNutrition.find(row => 
      row.name === selectedIngredient?.name
    );
    
    if (targetRow) {
      // Î∞±ÏóîÎìú ÏùëÎãµ ÌòïÏãùÏóê ÎßûÍ≤å ÏòÅÏñëÏÑ±Î∂Ñ Îç∞Ïù¥ÌÑ∞ Îß§Ìïë
      const updatedNutrition = localNutrition.map(row => {
        if (row.name === selectedIngredient?.name) {
          return {
            ...row,
            energy: food.energy || 0,
            protein: food.protein || 0,
            fat: food.fat || 0,
            carbohydrate: food.carbohydrate || 0,
            sugar: food.sugar || 0,
            sodium: food.sodium || 0,
            transFat: food.trans_fat || 0,
            saturatedFat: food.saturated_fat || 0,
            cholesterol: food.cholesterol || 0
          };
        }
        return row;
      });
      
      setLocalNutrition(updatedNutrition);
      console.log('ÏòÅÏñëÏÑ±Î∂Ñ Ï†ïÎ≥¥Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§:', updatedNutrition);
      
      // Ìï≠ÏÉÅ Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï†ÑÎã¨
      safeNutritionChange(updatedNutrition);
      
      // Î™®Îã¨ Îã´Í∏∞
      setShowSearchModal(false);
      setSearchQuery('');
      setSearchResults([]);
      
      // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú (ÏÑ†ÌÉùÏÇ¨Ìï≠)
      alert(`${food.food_name || food.name}Ïùò ÏòÅÏñëÏÑ±Î∂Ñ Ï†ïÎ≥¥Í∞Ä Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§.`);
    } else {
      console.error('Ìï¥Îãπ Ïû¨Î£åÏùò ÏòÅÏñëÏÑ±Î∂Ñ ÌñâÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', selectedIngredient?.name);
      alert('ÏòÅÏñëÏÑ±Î∂Ñ Ï†ïÎ≥¥Î•º Ï†ÅÏö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Ïû¨Î£åÎ•º Îã§Ïãú ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  return (
    <Card className="border-primary/20">
      <CardHeader className="border-b">
        <CardTitle className="flex items-center gap-2">
          <Badge variant="default" className="w-6 h-6 p-0 rounded-full">3</Badge>
          ÏòÅÏñëÏÑ±Î∂Ñ ÏûÖÎ†•
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-6 space-y-6">
        {/* Ï†úÌíà Ï†ïÎ≥¥ ÏöîÏïΩ */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card className="bg-muted/50">
            <CardHeader className="pb-3">
              <CardTitle className="text-base">Ï†úÌíà Í∏∞Î≥∏ Ï†ïÎ≥¥</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <div className="flex justify-between">
                <span className="text-muted-foreground">Ï†úÌíàÎ™Ö:</span>
                <span className="font-medium">{productName || '-'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">Ï†úÌíàÏú†Ìòï:</span>
                <span className="font-medium">{productType || '-'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">Ï¥ù Ï§ëÎüâ:</span>
                <span className="font-medium">{totalWeight}g</span>
              </div>
            </CardContent>
          </Card>
          
          <Card className="bg-muted/50">
            <CardHeader className="pb-3">
              <CardTitle className="text-base">Ï£ºÏöî ÏÑ±Î∂Ñ</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                {mainIngredients || 'ÏûÖÎ†•Îêú Ï£ºÏöî ÏÑ±Î∂ÑÏù¥ ÏóÜÏäµÎãàÎã§.'}
              </p>
            </CardContent>
          </Card>
        </div>

        <Separator />

        {/* ÏòÅÏñëÏÑ±Î∂Ñ ÏûÖÎ†• ÌÖåÏù¥Î∏î */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">ÏòÅÏñëÏÑ±Î∂Ñ Ï†ïÎ≥¥</h3>
          </div>
          
          <div className="border rounded-lg overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Ïû¨Î£åÎ™Ö</TableHead>
                  <TableHead>ÏóêÎÑàÏßÄ (kcal)</TableHead>
                  <TableHead>Îã®Î∞±Ïßà (g)</TableHead>
                  <TableHead>ÏßÄÎ∞© (g)</TableHead>
                  <TableHead>ÌÉÑÏàòÌôîÎ¨º (g)</TableHead>
                  <TableHead>ÎãπÎ•ò (g)</TableHead>
                  <TableHead>ÎÇòÌä∏Î•® (mg)</TableHead>
                  <TableHead>Ìä∏ÎûúÏä§ÏßÄÎ∞© (g)</TableHead>
                  <TableHead>Ìè¨ÌôîÏßÄÎ∞© (g)</TableHead>
                  <TableHead>ÏΩúÎ†àÏä§ÌÖåÎ°§ (mg)</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {localNutrition.map((row, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-medium">{row.name}</TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.energy || ''}
                        onChange={(e) => handleNutritionChange(index, 'energy', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.protein || ''}
                        onChange={(e) => handleNutritionChange(index, 'protein', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.fat || ''}
                        onChange={(e) => handleNutritionChange(index, 'fat', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.carbohydrate || ''}
                        onChange={(e) => handleNutritionChange(index, 'carbohydrate', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.sugar || ''}
                        onChange={(e) => handleNutritionChange(index, 'sugar', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.sodium || ''}
                        onChange={(e) => handleNutritionChange(index, 'sodium', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.transFat || ''}
                        onChange={(e) => handleNutritionChange(index, 'transFat', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.saturatedFat || ''}
                        onChange={(e) => handleNutritionChange(index, 'saturatedFat', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={row.cholesterol || ''}
                        onChange={(e) => handleNutritionChange(index, 'cholesterol', parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
              <TableFooter>
                <TableRow>
                  <TableCell className="font-medium">Ï¥ùÍ≥Ñ</TableCell>
                  <TableCell className="font-medium">{totals.energy.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.protein.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.fat.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.carbohydrate.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.sugar.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.sodium.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.transFat.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.saturatedFat.toFixed(1)}</TableCell>
                  <TableCell className="font-medium">{totals.cholesterol.toFixed(1)}</TableCell>
                </TableRow>
              </TableFooter>
            </Table>
          </div>
        </div>

        <Separator />

        {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
        <div className="flex flex-col sm:flex-row gap-4 sm:justify-between sm:items-center">
          <div className="flex flex-wrap gap-2">
            <Button 
              variant="default" 
              size="sm"
              className="bg-green-600 hover:bg-green-700 text-white"
              onClick={handleDBConnect}
            >
              <Database className="mr-2 w-4 h-4" />
              DB Ïó∞Í≤∞
            </Button>
            <Button 
              variant="secondary" 
              size="sm"
              className="bg-purple-600 hover:bg-purple-700 text-white"
            >
              {/* <Bot className="mr-2 w-4 h-4" /> */}
              AI Î∂ÑÏÑù
            </Button>
            <Button variant="outline" size="sm">
              {/* <Scale className="mr-2 w-4 h-4" /> */}
              Î≤ïÎ†π Î∂ÑÏÑù
            </Button>
            <Button variant="outline" size="sm">
              {/* <Calculator className="mr-2 w-4 h-4" /> */}
              ÏûêÎèô Í≥ÑÏÇ∞
            </Button>
          </div>
          
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Badge variant="outline">
              Ï¥ù {localNutrition.length}Í∞ú Ï†úÌíà ÏûÖÎ†•Îê®
            </Badge>
            <Badge 
              variant="outline" 
              className={`${
                isRatioOverLimit 
                  ? 'bg-red-50 text-red-700 border-red-300' 
                  : isRatioNearLimit 
                    ? 'bg-yellow-50 text-yellow-700 border-yellow-300'
                    : 'bg-green-50 text-green-700 border-green-300'
              }`}
            >
              Î∞∞Ìï©ÎπÑ Ìï©Í≥Ñ: {totalRatio.toFixed(2)}%
              {isRatioOverLimit && ' ‚ö†Ô∏è'}
              {isRatioNearLimit && !isRatioOverLimit && ' ‚ö†Ô∏è'}
            </Badge>
          </div>
        </div>

        {/* ÏòÅÏñëÏÑ±Î∂Ñ ÏöîÏïΩ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <Card className="bg-orange-50 dark:bg-orange-950/20 border-orange-200 dark:border-orange-800">
            <CardContent className="p-3 text-center">
              <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">
                {totals.sodium.toFixed(2)}
              </div>
              <div className="text-xs text-orange-600 dark:text-orange-400">mg</div>
              <div className="text-xs text-muted-foreground">ÎÇòÌä∏Î•®</div>
            </CardContent>
          </Card>
          
          <Card className="bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-800">
            <CardContent className="p-3 text-center">
              <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                {totals.carbohydrate.toFixed(2)}
              </div>
              <div className="text-xs text-green-600 dark:text-green-400">g</div>
              <div className="text-xs text-muted-foreground">ÌÉÑÏàòÌôîÎ¨º</div>
            </CardContent>
          </Card>
          
          <Card className="bg-purple-50 dark:bg-purple-950/20 border-purple-200 dark:border-purple-800">
            <CardContent className="p-3 text-center">
              <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                {totals.fat.toFixed(2)}
              </div>
              <div className="text-xs text-purple-600 dark:text-purple-400">g</div>
              <div className="text-xs text-muted-foreground">ÏßÄÎ∞©</div>
            </CardContent>
          </Card>
          
          <Card className="bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800">
            <CardContent className="p-3 text-center">
              <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                {totals.protein.toFixed(2)}
              </div>
              <div className="text-xs text-blue-600 dark:text-blue-400">g</div>
              <div className="text-xs text-muted-foreground">Îã®Î∞±Ïßà</div>
            </CardContent>
          </Card>
        </div>

        {/* ÎèÑÏõÄÎßê */}
        <div className="p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800">
          <h5 className="font-medium text-blue-900 dark:text-blue-100 mb-2">üí° ÏòÅÏñëÏÑ±Î∂Ñ ÏûÖÎ†• Í∞ÄÏù¥Îìú</h5>
          <ul className="text-sm text-blue-700 dark:text-blue-200 space-y-1">
            <li>‚Ä¢ <strong>Î∞∞Ìï©ÎπÑ</strong>Î•º ÏûÖÎ†•ÌïòÎ©¥ 100g Îãπ ÏòÅÏñëÏÑ±Î∂ÑÏù¥ ÏûêÎèôÏúºÎ°ú Í≥ÑÏÇ∞Îê©ÎãàÎã§.</li>
            <li>‚Ä¢ <strong>Î∞∞Ìï©ÎπÑ Ìï©Í≥ÑÎäî 100%Î•º Ï¥àÍ≥ºÌï† Ïàò ÏóÜÏäµÎãàÎã§.</strong> 95% Ïù¥ÏÉÅÏùº Îïå Í≤ΩÍ≥†Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.</li>
            <li>‚Ä¢ DB Ïó∞Í≤∞ÏùÑ ÌÜµÌï¥ ÏùºÎ∞òÏ†ÅÏù∏ ÏãùÌíàÏùò ÏòÅÏñëÏÑ±Î∂ÑÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>‚Ä¢ AI Î∂ÑÏÑùÏúºÎ°ú Ïû¨Î£å Í∏∞Î∞ò ÏòÅÏñëÏÑ±Î∂ÑÏùÑ Ï∂îÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>‚Ä¢ Ìñâ Ï∂îÍ∞Ä/ÏÇ≠Ï†úÍ∞Ä Í∞ÄÎä•ÌïòÎ©∞, Ï†ïÌôïÌïú Î∞∞Ìï©ÎπÑ ÏûÖÎ†•Ïù¥ Ï§ëÏöîÌï©ÎãàÎã§.</li>
          </ul>
        </div>
      </CardContent>

      {/* Ïû¨Î£å ÏÑ†ÌÉù Î™®Îã¨ */}
      <Dialog open={showIngredientModal} onOpenChange={setShowIngredientModal}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Ïû¨Î£å ÏÑ†ÌÉù</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              ÏòÅÏñëÏÑ±Î∂Ñ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïû¨Î£åÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.
            </p>
            <div className="space-y-2">
              {ingredients.map((ingredient, index) => (
                <div 
                  key={ingredient.id} 
                  className="flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50"
                >
                  <div>
                    <span className="font-medium">{ingredient.name}</span>
                    <span className="text-sm text-muted-foreground ml-2">
                      ({ingredient.weight}g, {ingredient.ratio}%)
                    </span>
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => handleIngredientSelect(ingredient)}
                  >
                    ÏÑ†ÌÉù
                  </Button>
                </div>
              ))}
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* ÏãùÌíà Í≤ÄÏÉâ Î™®Îã¨ */}
      <Dialog open={showSearchModal} onOpenChange={setShowSearchModal}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>ÏãùÌíà Í≤ÄÏÉâ - {selectedIngredient?.name}</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex gap-2">
              <Input
                placeholder="ÏãùÌíàÎ™ÖÏùÑ Í≤ÄÏÉâÌïòÏÑ∏Ïöî"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyPress={handleKeyPress}
              />
              <Button onClick={handleSearch} disabled={isSearching}>
                {isSearching ? (
                  <Loader2 className="w-4 h-4" />
                ) : (
                  <Search className="w-4 h-4" />
                )}
              </Button>
            </div>
            
            {isSearching ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="w-6 h-6 text-blue-500 animate-spin" />
                <span className="ml-2 text-blue-500">Í≤ÄÏÉâ Ï§ë...</span>
              </div>
            ) : null}

            {/* Í≤ÄÏÉâ Í≤∞Í≥º (ÏïÑÎûò Î∏îÎ°ùÎßå ÏÇ¨Ïö©) */}
            {searchResults.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-gray-700">Í≤ÄÏÉâ Í≤∞Í≥º ({searchResults.length}Í∞ú)</h4>
                <div className="max-h-60 overflow-y-auto space-y-2">
                  {searchResults.map((food: any) => (
                    <div
                      key={food.id}
                      className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 cursor-pointer"
                      onClick={() => handleFoodSelect(food)}
                    >
                      <div className="flex-1">
                        <div className="font-medium text-sm">{food.food_name || food.name}</div>
                        <div className="text-xs text-gray-500">
                          {food.energy ? `${food.energy}kcal` : 'ÏòÅÏñëÏ†ïÎ≥¥ ÏóÜÏùå'}
                          {food.protein ? ` | Îã®Î∞±Ïßà ${food.protein}g` : ''}
                          {food.fat ? ` | ÏßÄÎ∞© ${food.fat}g` : ''}
                          {food.carbohydrate ? ` | ÌÉÑÏàòÌôîÎ¨º ${food.carbohydrate}g` : ''}
                        </div>
                      </div>
                      <Button size="sm" variant="outline">ÏÑ†ÌÉù</Button>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏùÑ Îïå */}
            {!isSearching && searchQuery.trim() && searchResults.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <Search className="w-8 h-8 mx-auto mb-2 text-gray-300" />
                <p>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
                <p className="text-sm">Îã§Î•∏ Í≤ÄÏÉâÏñ¥Î•º ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.</p>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </Card>
  )
}